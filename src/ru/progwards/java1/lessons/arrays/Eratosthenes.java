package ru.progwards.java1.lessons.arrays;

import java.util.Arrays;

public class Eratosthenes {

    public static int p = 2;  //первое простое число
    private boolean[] sieve;


    //который должен разместить массив sieve с размером в N и заполнить его значениями true, после чего вызвать метод sift()
    // конструктор
    public Eratosthenes(int N) {
        // Arrays.fill(sieve, sieve[N]);
        this.sieve = new boolean[N+1];
        Arrays.fill(sieve,true);
        sift();
    }

    //метод
    //который, собственно и реализует алгоритм Эратосфена, просеивая составные числа.
//Подсказка - нужно реализовать 2 вложенных цикла, внешний, например по i от 2 до N-1,
// и внутренний, например по j который будет просеивать числа, кратные переменной внешнего цикла i*j.
    private void sift() {
    }

    //Реализовать метод
    //который возвращает sieve[n], что бы можно было узнать, простое число n или составное
    public boolean isSimple(int n) {
        // return false;
        return sieve[n];
    }

    public static void main(String[] args) {

    }
}

/*
Алгоритм:
Выписать подряд все целые числа от двух до n (2, 3, 4, …, N).
Пусть переменная p изначально равна двум — первому простому числу.
Зачеркнуть в списке числа от 2p до N считая шагами по p (это будут числа кратные p: 2p, 3p, 4p, …).
Найти первое незачёркнутое число в списке, большее чем p, и присвоить значению переменной p это число.
Повторять шаги 3 и 4, пока возможно.
Теперь все незачёркнутые числа в списке — это все простые числа от 2 до n.

Говоря простым языком, надо вначале вычеркнуть все числа, которые делятся на 2, кроме самой двойки, т.е.
 каждое второе число, потом, которые делятся на 3, т.е. каждое 3-е число, кроме самой 3-ки, и т.д. в цикле

1.1 Реализовать класс Eratosthenes, содержащий:
массив чисел, собственно, "решето"
private boolean[] sieve, для того, чтобы узнать, я является ли число n простым, нужно взять значение по индексу в
 массиве. sieve[n]. Значение true, означает простое число, false - составное.
1.2 Реализовать конструктор
public Eratosthenes(int N), который должен разместить массив sieve с размером в N и заполнить его значениями true, после чего вызвать метод sift()
1.3 Реализовать метод
private void sift(), который, собственно и реализует алгоритм Эратосфена, просеивая составные числа.
Подсказка - нужно реализовать 2 вложенных цикла, внешний, например по i от 2 до N-1, и внутренний, например
 по j который будет просеивать числа, кратные переменной внешнего цикла i*j.
1.4 Реализовать метод
public boolean isSimple(int n), который возвращает sieve[n], что бы можно было узнать, простое число n или составное
* */